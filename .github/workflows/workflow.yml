name: bcos-boostssl GitHub Actions
on:
  push:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  release:
    types: [published, created, edited]
env:
  CCACHE_DIR: ${{ github.workspace }}/ccache
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build_with_clang:
    name: build_with_clang
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: Nightly default
        run: rustup default nightly
      - name: Prepare vcpkg
        if: runner.os != 'Windows'
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: 51b14cd4e1230dd51c11ffeff6f7d53c61cc5297 }
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/vcpkg
            /Users/runner/vcpkg/
            ccache
            deps/
            c:/vcpkg
            !c:/vcpkg/.git
            !c:/vcpkg/buildtrees
            !c:/vcpkg/packages
            !c:/vcpkg/downloads
          key: vcpkg-clang-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            vcpkg-clang-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            vcpkg-clang-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-
            vcpkg-clang-v3-notest-${{ runner.temp }}-
      - name: install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install ccache
      - name: install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: sudo apt install -y git curl openssl build-essential clang cmake ccache
      - name: configure
        if: runner.os == 'macOS'
        run: export SDKROOT=$(xcrun --sdk macosx --show-sdk-path) && CC=/usr/bin/clang CXX=/usr/bin/clang++ mkdir build && cd build && cmake ../ -DTESTS=ON -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
      - name: configure
        if: runner.os == 'Linux'
        run: CC=/usr/bin/clang CXX=/usr/bin/clang++ mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake ../
      - name: compile
        run: cd build && make -j2
      # - name: run test
      #  run: CTEST_OUTPUT_ON_FAILURE=TRUE make test
  build_with_gcc:
    name: build_with_gcc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: Prepare vcpkg
        if: runner.os != 'Windows'
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: 51b14cd4e1230dd51c11ffeff6f7d53c61cc5297 }
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/vcpkg
            /Users/runner/vcpkg/
            ccache
            deps/
            c:/vcpkg
            !c:/vcpkg/.git
            !c:/vcpkg/buildtrees
            !c:/vcpkg/packages
            !c:/vcpkg/downloads
          key: vcpkg-gcc-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            vcpkg-gcc-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            vcpkg-gcc-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-
            vcpkg-gcc-v2-notest-${{ runner.temp }}-
      - uses: actions/cache@v2
        id: ccache
        with:
          path: ccache
          key: cache-gcc-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            ccache-gcc-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            cache-gcc-v2-notest-${{ runner.temp }}-${{ github.base_ref }}-
            cache-gcc-v2-notest-${{ runner.temp }}-
      - name: install Ubuntu dependencies
        run: sudo apt install -y git curl openssl build-essential cmake ccache
      - name: configure
        run: mkdir -p build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake ../
      - name: compile
        run: cd build && make -j4
      # - name: run test
      #  run: CTEST_OUTPUT_ON_FAILURE=TRUE make test
  build_with_centos:
    name: build_with_centos
    runs-on: ubuntu-latest
    container:
      image: docker.io/centos:7
      volumes:
        - /usr/local/share/vcpkg:/usr/local/share/vcpkg
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 5
      - uses: actions/cache@v3
        id: deps_cache
        with:
          path: |
            deps/
            /usr/local/share/vcpkg/buildtrees
            /usr/local/share/vcpkg/packages
            /home/runner/.ccache
            /Users/runner/.ccache/
          key: centos-notest-${{ matrix.os }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            centos-notest-${{ matrix.os }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            centos-notest-${{ matrix.os }}-${{ github.base_ref }}-
            centos-notest-${{ matrix.os }}-
      - name: Prepare centos tools
        run: |
          rpm -ivh https://cbs.centos.org/kojifiles/packages/centos-release-scl-rh/2/3.el7.centos/noarch/centos-release-scl-rh-2-3.el7.centos.noarch.rpm
          rpm -ivh https://cbs.centos.org/kojifiles/packages/centos-release-scl/2/3.el7.centos/noarch/centos-release-scl-2-3.el7.centos.noarch.rpm
          sed -i s/mirror.centos.org/mirrors.aliyun.com/g /etc/yum.repos.d/*.repo
          sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo
          sed -i s/^mirrorlist=http/#mirrorlist=http/g /etc/yum.repos.d/*.repo
          cat /etc/yum.repos.d/*.repo
          yum clean all
          yum makecache
          yum update -y
          yum install -y epel-release centos-release-scl centos-release-scl-rh
          yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum install -y -q flex bison patch glibc-static glibc-devel libzstd-devel
          yum install -y -q devtoolset-11 llvm-toolset-7.0 rh-perl530-perl cmake3 zlib-devel ccache python-devel python3-devel python3-pip automake openssl
          yum install -y -q git
      - name: configure
        run: |
          source /opt/rh/devtoolset-11/enable
          mkdir -p build && cd build
          cmake3 -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake ../
      - name: compile
        run: |
          source /opt/rh/devtoolset-11/enable
          mkdir -p build && cd build
          make -j4

  build_with_windows:
    name: build_with_windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/vcpkg
            /github/home/vcpkg
            /Users/runner/vcpkg
            /home/runner/vcpkg/_Base/Download/
            /github/home/vcpkg/_Base/Download/
            /Users/runner/vcpkg/_Base/Download/
            C:/vcpkg/
            C:/vcpkg/_Base/Download/
            ccache
          key: vcpkg-msvc-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            vcpkg-msvc-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            vcpkg-msvc-v3-notest-${{ runner.temp }}-${{ github.base_ref }}-
            vcpkg-msvc-v3-notest-${{ runner.temp }}-
      - name: Add MSbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: configure
        if: runner.os == 'Windows'
        run: mkdir -p build && cd build && cmake -G "Visual Studio 16 2019" -A x64 -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake ../
      - name: compile
        run:
          cd build && MSBuild /version && MSBuild bcos-boostssl.sln /p:Configuration=Release /p:Platform=x64
